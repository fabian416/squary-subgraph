"use strict";
var __createBinding =
  (this && this.__createBinding) ||
  (Object.create
    ? function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (
          !desc ||
          ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)
        ) {
          desc = {
            enumerable: true,
            get: function () {
              return m[k];
            },
          };
        }
        Object.defineProperty(o, k2, desc);
      }
    : function (o, m, k, k2) {
        if (k2 === undefined) k2 = k;
        o[k2] = m[k];
      });
var __setModuleDefault =
  (this && this.__setModuleDefault) ||
  (Object.create
    ? function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      }
    : function (o, v) {
        o["default"] = v;
      });
var __importStar =
  (this && this.__importStar) ||
  function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null)
      for (var k in mod)
        if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
          __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
  };
Object.defineProperty(exports, "__esModule", { value: true });
exports.NETWORK_SUFFIX_MAP =
  exports.WHITELIST_TOKENS_MAP =
  exports.CHAIN_LINK_CONTRACT_ADDRESS =
  exports.YEARN_LENS_CONTRACT_ADDRESS =
  exports.UNISWAP_ROUTER_CONTRACT_ADDRESSES =
  exports.UNISWAP_DEFAULT_RESERVE_CALL =
  exports.SUSHISWAP_ROUTER_ADDRESS_MAP =
  exports.SUSHISWAP_WETH_ADDRESS =
  exports.SUSHISWAP_CALCULATIONS_ADDRESS_MAP =
  exports.SUSHISWAP_DEFAULT_RESERVE_CALL =
  exports.CURVE_POOL_REGISTRY_ADDRESS_MAP =
  exports.CURVE_REGISTRY_ADDRESS_MAP =
  exports.CURVE_CALCULATIONS_ADDRESS_MAP =
  exports.PROTOCOL_ID =
  exports.WHITELIST_TOKENS_LIST =
  exports.CHAIN_LINK_USD_ADDRESS =
  exports.ZERO_ADDRESS =
  exports.ZERO_ADDRESS_STRING =
  exports.DEFAULT_DECIMALS =
  exports.DEFAULT_USDC_DECIMALS =
  exports.BIGDECIMAL_HUNDRED =
  exports.BIGDECIMAL_ZERO =
  exports.BIGINT_TEN_THOUSAND =
  exports.BIGINT_HUNDRED =
  exports.BIGINT_TEN =
  exports.BIGINT_ONE =
  exports.BIGINT_ZERO =
    void 0;
const MAINNET = __importStar(require("../config/mainnet"));
const FANTOM = __importStar(require("../config/fantom"));
const ARBITRUM_ONE = __importStar(require("../config/arbitrum_one"));
const MATIC = __importStar(require("../config/matic"));
const AURORA = __importStar(require("../config/aurora"));
const AVALANCHE = __importStar(require("../config/avalanche"));
const BSC = __importStar(require("../config/bsc"));
const CELO = __importStar(require("../config/celo"));
const CRONOS = __importStar(require("../config/cronos"));
const FUSE = __importStar(require("../config/fuse"));
const HARMONY = __importStar(require("../config/harmony"));
const HECO = __importStar(require("../config/heco"));
const METIS = __importStar(require("../config/metis"));
const MOONBEAM = __importStar(require("../config/moonbeam"));
const MOONRIVER = __importStar(require("../config/moonriver"));
const OASIS = __importStar(require("../config/oasis"));
const graph_ts_1 = require("@graphprotocol/graph-ts");
const UniswapPair_1 = require("../../../generated/Standard/UniswapPair");
const SushiSwapPair_1 = require("../../../generated/Standard/SushiSwapPair");
///////////////////////////////////////////////////////////////////////////
/////////////////////////////////// COMMON ////////////////////////////////
///////////////////////////////////////////////////////////////////////////
exports.BIGINT_ZERO = graph_ts_1.BigInt.fromI32(0);
exports.BIGINT_ONE = graph_ts_1.BigInt.fromI32(1);
exports.BIGINT_TEN = graph_ts_1.BigInt.fromI32(10);
exports.BIGINT_HUNDRED = graph_ts_1.BigInt.fromI32(100);
exports.BIGINT_TEN_THOUSAND = graph_ts_1.BigInt.fromI32(10000);
exports.BIGDECIMAL_ZERO = new graph_ts_1.BigDecimal(exports.BIGINT_ZERO);
exports.BIGDECIMAL_HUNDRED = new graph_ts_1.BigDecimal(exports.BIGINT_HUNDRED);
exports.DEFAULT_USDC_DECIMALS = 6;
exports.DEFAULT_DECIMALS = graph_ts_1.BigInt.fromI32(18);
exports.ZERO_ADDRESS_STRING = "0x0000000000000000000000000000000000000000";
exports.ZERO_ADDRESS = graph_ts_1.Address.fromString(
  "0x0000000000000000000000000000000000000000"
);
exports.CHAIN_LINK_USD_ADDRESS = graph_ts_1.Address.fromString(
  "0x0000000000000000000000000000000000000348"
);
exports.WHITELIST_TOKENS_LIST = [
  "WETH",
  "USDT",
  "DAI",
  "USDC",
  "ETH",
  "WBTC",
  "EURS",
  "LINK",
  "gfUSDT",
  "WFTM",
  "fBTC",
  "FRAX",
  "CRV",
];
exports.PROTOCOL_ID = "BeefyFinance";
///////////////////////////////////////////////////////////////////////////
///////////////////////////// CURVE CONTRACT //////////////////////////////
///////////////////////////////////////////////////////////////////////////
exports.CURVE_CALCULATIONS_ADDRESS_MAP = new graph_ts_1.TypedMap();
exports.CURVE_CALCULATIONS_ADDRESS_MAP.set(
  MAINNET.NETWORK_STRING,
  MAINNET.CURVE_CALCULATIONS_ADDRESS
);
exports.CURVE_CALCULATIONS_ADDRESS_MAP.set(
  FANTOM.NETWORK_STRING,
  FANTOM.CURVE_CALCULATIONS_ADDRESS
);
exports.CURVE_CALCULATIONS_ADDRESS_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.CURVE_CALCULATIONS_ADDRESS
);
exports.CURVE_CALCULATIONS_ADDRESS_MAP.set(
  MATIC.NETWORK_STRING,
  MATIC.CURVE_CALCULATIONS_ADDRESS
);
exports.CURVE_CALCULATIONS_ADDRESS_MAP.set(
  AURORA.NETWORK_STRING,
  AURORA.CURVE_CALCULATIONS_ADDRESS
);
exports.CURVE_CALCULATIONS_ADDRESS_MAP.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.CURVE_CALCULATIONS_ADDRESS
);
exports.CURVE_CALCULATIONS_ADDRESS_MAP.set(
  BSC.NETWORK_STRING,
  BSC.CURVE_CALCULATIONS_ADDRESS
);
exports.CURVE_CALCULATIONS_ADDRESS_MAP.set(
  CELO.NETWORK_STRING,
  CELO.CURVE_CALCULATIONS_ADDRESS
);
exports.CURVE_CALCULATIONS_ADDRESS_MAP.set(
  CRONOS.NETWORK_STRING,
  CRONOS.CURVE_CALCULATIONS_ADDRESS
);
exports.CURVE_CALCULATIONS_ADDRESS_MAP.set(
  FUSE.NETWORK_STRING,
  FUSE.CURVE_CALCULATIONS_ADDRESS
);
exports.CURVE_CALCULATIONS_ADDRESS_MAP.set(
  HARMONY.NETWORK_STRING,
  HARMONY.CURVE_CALCULATIONS_ADDRESS
);
exports.CURVE_CALCULATIONS_ADDRESS_MAP.set(
  HECO.NETWORK_STRING,
  HECO.CURVE_CALCULATIONS_ADDRESS
);
exports.CURVE_CALCULATIONS_ADDRESS_MAP.set(
  METIS.NETWORK_STRING,
  METIS.CURVE_CALCULATIONS_ADDRESS
);
exports.CURVE_CALCULATIONS_ADDRESS_MAP.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.CURVE_CALCULATIONS_ADDRESS
);
exports.CURVE_CALCULATIONS_ADDRESS_MAP.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.CURVE_CALCULATIONS_ADDRESS
);
exports.CURVE_CALCULATIONS_ADDRESS_MAP.set(
  OASIS.NETWORK_STRING,
  OASIS.CURVE_CALCULATIONS_ADDRESS
);
exports.CURVE_REGISTRY_ADDRESS_MAP = new graph_ts_1.TypedMap();
exports.CURVE_REGISTRY_ADDRESS_MAP.set(
  MAINNET.NETWORK_STRING,
  MAINNET.CURVE_REGISTRY_ADDRESS
);
exports.CURVE_REGISTRY_ADDRESS_MAP.set(
  FANTOM.NETWORK_STRING,
  FANTOM.CURVE_REGISTRY_ADDRESS
);
exports.CURVE_REGISTRY_ADDRESS_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.CURVE_REGISTRY_ADDRESS
);
exports.CURVE_REGISTRY_ADDRESS_MAP.set(
  MATIC.NETWORK_STRING,
  MATIC.CURVE_REGISTRY_ADDRESS
);
exports.CURVE_REGISTRY_ADDRESS_MAP.set(
  AURORA.NETWORK_STRING,
  AURORA.CURVE_REGISTRY_ADDRESS
);
exports.CURVE_REGISTRY_ADDRESS_MAP.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.CURVE_REGISTRY_ADDRESS
);
exports.CURVE_REGISTRY_ADDRESS_MAP.set(
  BSC.NETWORK_STRING,
  BSC.CURVE_REGISTRY_ADDRESS
);
exports.CURVE_REGISTRY_ADDRESS_MAP.set(
  CELO.NETWORK_STRING,
  CELO.CURVE_REGISTRY_ADDRESS
);
exports.CURVE_REGISTRY_ADDRESS_MAP.set(
  CRONOS.NETWORK_STRING,
  CRONOS.CURVE_REGISTRY_ADDRESS
);
exports.CURVE_REGISTRY_ADDRESS_MAP.set(
  FUSE.NETWORK_STRING,
  FUSE.CURVE_REGISTRY_ADDRESS
);
exports.CURVE_REGISTRY_ADDRESS_MAP.set(
  HARMONY.NETWORK_STRING,
  HARMONY.CURVE_REGISTRY_ADDRESS
);
exports.CURVE_REGISTRY_ADDRESS_MAP.set(
  HECO.NETWORK_STRING,
  HECO.CURVE_REGISTRY_ADDRESS
);
exports.CURVE_REGISTRY_ADDRESS_MAP.set(
  METIS.NETWORK_STRING,
  METIS.CURVE_REGISTRY_ADDRESS
);
exports.CURVE_REGISTRY_ADDRESS_MAP.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.CURVE_REGISTRY_ADDRESS
);
exports.CURVE_REGISTRY_ADDRESS_MAP.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.CURVE_REGISTRY_ADDRESS
);
exports.CURVE_REGISTRY_ADDRESS_MAP.set(
  OASIS.NETWORK_STRING,
  OASIS.CURVE_REGISTRY_ADDRESS
);
exports.CURVE_POOL_REGISTRY_ADDRESS_MAP = new graph_ts_1.TypedMap();
exports.CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  MAINNET.NETWORK_STRING,
  MAINNET.CURVE_POOL_REGISTRY_ADDRESS
);
exports.CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  FANTOM.NETWORK_STRING,
  FANTOM.CURVE_POOL_REGISTRY_ADDRESS
);
exports.CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.CURVE_POOL_REGISTRY_ADDRESS
);
exports.CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  MATIC.NETWORK_STRING,
  MATIC.CURVE_POOL_REGISTRY_ADDRESS
);
exports.CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  AURORA.NETWORK_STRING,
  AURORA.CURVE_POOL_REGISTRY_ADDRESS
);
exports.CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.CURVE_POOL_REGISTRY_ADDRESS
);
exports.CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  BSC.NETWORK_STRING,
  BSC.CURVE_POOL_REGISTRY_ADDRESS
);
exports.CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  CELO.NETWORK_STRING,
  CELO.CURVE_POOL_REGISTRY_ADDRESS
);
exports.CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  CRONOS.NETWORK_STRING,
  CRONOS.CURVE_POOL_REGISTRY_ADDRESS
);
exports.CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  FUSE.NETWORK_STRING,
  FUSE.CURVE_POOL_REGISTRY_ADDRESS
);
exports.CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  HARMONY.NETWORK_STRING,
  HARMONY.CURVE_POOL_REGISTRY_ADDRESS
);
exports.CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  HECO.NETWORK_STRING,
  HECO.CURVE_POOL_REGISTRY_ADDRESS
);
exports.CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  METIS.NETWORK_STRING,
  METIS.CURVE_POOL_REGISTRY_ADDRESS
);
exports.CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.CURVE_POOL_REGISTRY_ADDRESS
);
exports.CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.CURVE_POOL_REGISTRY_ADDRESS
);
exports.CURVE_POOL_REGISTRY_ADDRESS_MAP.set(
  OASIS.NETWORK_STRING,
  OASIS.CURVE_POOL_REGISTRY_ADDRESS
);
///////////////////////////////////////////////////////////////////////////
///////////////////////////// SUSHISWAP CONTRACT //////////////////////////
///////////////////////////////////////////////////////////////////////////
exports.SUSHISWAP_DEFAULT_RESERVE_CALL =
  new SushiSwapPair_1.SushiSwapPair__getReservesResult(
    exports.BIGINT_ZERO,
    exports.BIGINT_ZERO,
    exports.BIGINT_ZERO
  );
exports.SUSHISWAP_CALCULATIONS_ADDRESS_MAP = new graph_ts_1.TypedMap();
exports.SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  MAINNET.NETWORK_STRING,
  MAINNET.SUSHISWAP_CALCULATIONS_ADDRESS
);
exports.SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  FANTOM.NETWORK_STRING,
  FANTOM.SUSHISWAP_CALCULATIONS_ADDRESS
);
exports.SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.SUSHISWAP_CALCULATIONS_ADDRESS
);
exports.SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  MATIC.NETWORK_STRING,
  MATIC.SUSHISWAP_CALCULATIONS_ADDRESS
);
exports.SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  AURORA.NETWORK_STRING,
  AURORA.SUSHISWAP_CALCULATIONS_ADDRESS
);
exports.SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.SUSHISWAP_CALCULATIONS_ADDRESS
);
exports.SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  BSC.NETWORK_STRING,
  BSC.SUSHISWAP_CALCULATIONS_ADDRESS
);
exports.SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  CELO.NETWORK_STRING,
  CELO.SUSHISWAP_CALCULATIONS_ADDRESS
);
exports.SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  CRONOS.NETWORK_STRING,
  CRONOS.SUSHISWAP_CALCULATIONS_ADDRESS
);
exports.SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  FUSE.NETWORK_STRING,
  FUSE.SUSHISWAP_CALCULATIONS_ADDRESS
);
exports.SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  HARMONY.NETWORK_STRING,
  HARMONY.SUSHISWAP_CALCULATIONS_ADDRESS
);
exports.SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  HECO.NETWORK_STRING,
  HECO.SUSHISWAP_CALCULATIONS_ADDRESS
);
exports.SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  METIS.NETWORK_STRING,
  METIS.SUSHISWAP_CALCULATIONS_ADDRESS
);
exports.SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.SUSHISWAP_CALCULATIONS_ADDRESS
);
exports.SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.SUSHISWAP_CALCULATIONS_ADDRESS
);
exports.SUSHISWAP_CALCULATIONS_ADDRESS_MAP.set(
  OASIS.NETWORK_STRING,
  OASIS.SUSHISWAP_CALCULATIONS_ADDRESS
);
exports.SUSHISWAP_WETH_ADDRESS = new graph_ts_1.TypedMap();
exports.SUSHISWAP_WETH_ADDRESS.set(
  MAINNET.NETWORK_STRING,
  MAINNET.SUSHISWAP_WETH_ADDRESS
);
exports.SUSHISWAP_WETH_ADDRESS.set(
  FANTOM.NETWORK_STRING,
  FANTOM.SUSHISWAP_WETH_ADDRESS
);
exports.SUSHISWAP_WETH_ADDRESS.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.SUSHISWAP_WETH_ADDRESS
);
exports.SUSHISWAP_WETH_ADDRESS.set(
  MATIC.NETWORK_STRING,
  MATIC.SUSHISWAP_WETH_ADDRESS
);
exports.SUSHISWAP_WETH_ADDRESS.set(
  AURORA.NETWORK_STRING,
  AURORA.SUSHISWAP_WETH_ADDRESS
);
exports.SUSHISWAP_WETH_ADDRESS.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.SUSHISWAP_WETH_ADDRESS
);
exports.SUSHISWAP_WETH_ADDRESS.set(
  BSC.NETWORK_STRING,
  BSC.SUSHISWAP_WETH_ADDRESS
);
exports.SUSHISWAP_WETH_ADDRESS.set(
  CELO.NETWORK_STRING,
  CELO.SUSHISWAP_WETH_ADDRESS
);
exports.SUSHISWAP_WETH_ADDRESS.set(
  CRONOS.NETWORK_STRING,
  CRONOS.SUSHISWAP_WETH_ADDRESS
);
exports.SUSHISWAP_WETH_ADDRESS.set(
  FUSE.NETWORK_STRING,
  FUSE.SUSHISWAP_WETH_ADDRESS
);
exports.SUSHISWAP_WETH_ADDRESS.set(
  HARMONY.NETWORK_STRING,
  HARMONY.SUSHISWAP_WETH_ADDRESS
);
exports.SUSHISWAP_WETH_ADDRESS.set(
  HECO.NETWORK_STRING,
  HECO.SUSHISWAP_WETH_ADDRESS
);
exports.SUSHISWAP_WETH_ADDRESS.set(
  METIS.NETWORK_STRING,
  METIS.SUSHISWAP_WETH_ADDRESS
);
exports.SUSHISWAP_WETH_ADDRESS.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.SUSHISWAP_WETH_ADDRESS
);
exports.SUSHISWAP_WETH_ADDRESS.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.SUSHISWAP_WETH_ADDRESS
);
exports.SUSHISWAP_WETH_ADDRESS.set(
  OASIS.NETWORK_STRING,
  OASIS.SUSHISWAP_WETH_ADDRESS
);
exports.SUSHISWAP_ROUTER_ADDRESS_MAP = new graph_ts_1.TypedMap();
exports.SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  MAINNET.NETWORK_STRING,
  MAINNET.SUSHISWAP_ROUTER_ADDRESS
);
exports.SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  FANTOM.NETWORK_STRING,
  FANTOM.SUSHISWAP_ROUTER_ADDRESS
);
exports.SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.SUSHISWAP_ROUTER_ADDRESS
);
exports.SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  MATIC.NETWORK_STRING,
  MATIC.SUSHISWAP_ROUTER_ADDRESS
);
exports.SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  AURORA.NETWORK_STRING,
  AURORA.SUSHISWAP_ROUTER_ADDRESS
);
exports.SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.SUSHISWAP_ROUTER_ADDRESS
);
exports.SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  BSC.NETWORK_STRING,
  BSC.SUSHISWAP_ROUTER_ADDRESS
);
exports.SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  CELO.NETWORK_STRING,
  CELO.SUSHISWAP_ROUTER_ADDRESS
);
exports.SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  CRONOS.NETWORK_STRING,
  CRONOS.SUSHISWAP_ROUTER_ADDRESS
);
exports.SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  FUSE.NETWORK_STRING,
  FUSE.SUSHISWAP_ROUTER_ADDRESS
);
exports.SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  HARMONY.NETWORK_STRING,
  HARMONY.SUSHISWAP_ROUTER_ADDRESS
);
exports.SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  HECO.NETWORK_STRING,
  HECO.SUSHISWAP_ROUTER_ADDRESS
);
exports.SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  METIS.NETWORK_STRING,
  METIS.SUSHISWAP_ROUTER_ADDRESS
);
exports.SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.SUSHISWAP_ROUTER_ADDRESS
);
exports.SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.SUSHISWAP_ROUTER_ADDRESS
);
exports.SUSHISWAP_ROUTER_ADDRESS_MAP.set(
  OASIS.NETWORK_STRING,
  OASIS.SUSHISWAP_ROUTER_ADDRESS
);
///////////////////////////////////////////////////////////////////////////
///////////////////////////// UNISWAP CONTRACT ////////////////////////////
///////////////////////////////////////////////////////////////////////////
exports.UNISWAP_DEFAULT_RESERVE_CALL =
  new UniswapPair_1.UniswapPair__getReservesResult(
    exports.BIGINT_ZERO,
    exports.BIGINT_ZERO,
    exports.BIGINT_ZERO
  );
exports.UNISWAP_ROUTER_CONTRACT_ADDRESSES = new graph_ts_1.TypedMap();
exports.UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  MAINNET.NETWORK_STRING,
  MAINNET.UNISWAP_ROUTER_ADDRESS
);
exports.UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  FANTOM.NETWORK_STRING,
  FANTOM.SPOOKY_SWAP_ROUTER_ADDRESS
);
exports.UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.UNISWAP_ROUTER_ADDRESS
);
exports.UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  MATIC.NETWORK_STRING,
  MATIC.UNISWAP_ROUTER_ADDRESS
);
exports.UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  AURORA.NETWORK_STRING,
  AURORA.UNISWAP_ROUTER_ADDRESS
);
exports.UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.UNISWAP_ROUTER_ADDRESS
);
exports.UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  BSC.NETWORK_STRING,
  BSC.UNISWAP_ROUTER_ADDRESS
);
exports.UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  CELO.NETWORK_STRING,
  CELO.UNISWAP_ROUTER_ADDRESS
);
exports.UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  CRONOS.NETWORK_STRING,
  CRONOS.UNISWAP_ROUTER_ADDRESS
);
exports.UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  FUSE.NETWORK_STRING,
  FUSE.UNISWAP_ROUTER_ADDRESS
);
exports.UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  HARMONY.NETWORK_STRING,
  HARMONY.UNISWAP_ROUTER_ADDRESS
);
exports.UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  HECO.NETWORK_STRING,
  HECO.UNISWAP_ROUTER_ADDRESS
);
exports.UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  METIS.NETWORK_STRING,
  METIS.UNISWAP_ROUTER_ADDRESS
);
exports.UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.UNISWAP_ROUTER_ADDRESS
);
exports.UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.UNISWAP_ROUTER_ADDRESS
);
exports.UNISWAP_ROUTER_CONTRACT_ADDRESSES.set(
  OASIS.NETWORK_STRING,
  OASIS.UNISWAP_ROUTER_ADDRESS
);
///////////////////////////////////////////////////////////////////////////
///////////////////////////// YEARNLENS CONTRACT //////////////////////////
///////////////////////////////////////////////////////////////////////////
exports.YEARN_LENS_CONTRACT_ADDRESS = new Map();
exports.YEARN_LENS_CONTRACT_ADDRESS.set(
  MAINNET.NETWORK_STRING,
  MAINNET.YEARN_LENS_CONTRACT_ADDRESS
);
exports.YEARN_LENS_CONTRACT_ADDRESS.set(
  FANTOM.NETWORK_STRING,
  FANTOM.YEARN_LENS_CONTRACT_ADDRESS
);
exports.YEARN_LENS_CONTRACT_ADDRESS.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.YEARN_LENS_CONTRACT_ADDRESS
);
exports.YEARN_LENS_CONTRACT_ADDRESS.set(
  MATIC.NETWORK_STRING,
  MATIC.YEARN_LENS_CONTRACT_ADDRESS
);
exports.YEARN_LENS_CONTRACT_ADDRESS.set(
  AURORA.NETWORK_STRING,
  AURORA.YEARN_LENS_CONTRACT_ADDRESS
);
exports.YEARN_LENS_CONTRACT_ADDRESS.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.YEARN_LENS_CONTRACT_ADDRESS
);
exports.YEARN_LENS_CONTRACT_ADDRESS.set(
  BSC.NETWORK_STRING,
  BSC.YEARN_LENS_CONTRACT_ADDRESS
);
exports.YEARN_LENS_CONTRACT_ADDRESS.set(
  CELO.NETWORK_STRING,
  CELO.YEARN_LENS_CONTRACT_ADDRESS
);
exports.YEARN_LENS_CONTRACT_ADDRESS.set(
  CRONOS.NETWORK_STRING,
  CRONOS.YEARN_LENS_CONTRACT_ADDRESS
);
exports.YEARN_LENS_CONTRACT_ADDRESS.set(
  FUSE.NETWORK_STRING,
  FUSE.YEARN_LENS_CONTRACT_ADDRESS
);
exports.YEARN_LENS_CONTRACT_ADDRESS.set(
  HARMONY.NETWORK_STRING,
  HARMONY.YEARN_LENS_CONTRACT_ADDRESS
);
exports.YEARN_LENS_CONTRACT_ADDRESS.set(
  HECO.NETWORK_STRING,
  HECO.YEARN_LENS_CONTRACT_ADDRESS
);
exports.YEARN_LENS_CONTRACT_ADDRESS.set(
  METIS.NETWORK_STRING,
  METIS.YEARN_LENS_CONTRACT_ADDRESS
);
exports.YEARN_LENS_CONTRACT_ADDRESS.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.YEARN_LENS_CONTRACT_ADDRESS
);
exports.YEARN_LENS_CONTRACT_ADDRESS.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.YEARN_LENS_CONTRACT_ADDRESS
);
exports.YEARN_LENS_CONTRACT_ADDRESS.set(
  OASIS.NETWORK_STRING,
  OASIS.YEARN_LENS_CONTRACT_ADDRESS
);
///////////////////////////////////////////////////////////////////////////
///////////////////////////// CHAINLINK CONTRACT //////////////////////////
///////////////////////////////////////////////////////////////////////////
exports.CHAIN_LINK_CONTRACT_ADDRESS = new Map();
exports.CHAIN_LINK_CONTRACT_ADDRESS.set(
  MAINNET.NETWORK_STRING,
  MAINNET.CHAIN_LINK_CONTRACT_ADDRESS
);
exports.CHAIN_LINK_CONTRACT_ADDRESS.set(
  FANTOM.NETWORK_STRING,
  FANTOM.CHAIN_LINK_CONTRACT_ADDRESS
);
exports.CHAIN_LINK_CONTRACT_ADDRESS.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.CHAIN_LINK_CONTRACT_ADDRESS
);
exports.CHAIN_LINK_CONTRACT_ADDRESS.set(
  ARBITRUM_ONE.NETWORK_STRING,
  MATIC.CHAIN_LINK_CONTRACT_ADDRESS
);
exports.CHAIN_LINK_CONTRACT_ADDRESS.set(
  AURORA.NETWORK_STRING,
  AURORA.CHAIN_LINK_CONTRACT_ADDRESS
);
exports.CHAIN_LINK_CONTRACT_ADDRESS.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.CHAIN_LINK_CONTRACT_ADDRESS
);
exports.CHAIN_LINK_CONTRACT_ADDRESS.set(
  BSC.NETWORK_STRING,
  BSC.CHAIN_LINK_CONTRACT_ADDRESS
);
exports.CHAIN_LINK_CONTRACT_ADDRESS.set(
  CELO.NETWORK_STRING,
  CELO.CHAIN_LINK_CONTRACT_ADDRESS
);
exports.CHAIN_LINK_CONTRACT_ADDRESS.set(
  CRONOS.NETWORK_STRING,
  CRONOS.CHAIN_LINK_CONTRACT_ADDRESS
);
exports.CHAIN_LINK_CONTRACT_ADDRESS.set(
  FUSE.NETWORK_STRING,
  FUSE.CHAIN_LINK_CONTRACT_ADDRESS
);
exports.CHAIN_LINK_CONTRACT_ADDRESS.set(
  HARMONY.NETWORK_STRING,
  HARMONY.CHAIN_LINK_CONTRACT_ADDRESS
);
exports.CHAIN_LINK_CONTRACT_ADDRESS.set(
  HECO.NETWORK_STRING,
  HECO.CHAIN_LINK_CONTRACT_ADDRESS
);
exports.CHAIN_LINK_CONTRACT_ADDRESS.set(
  METIS.NETWORK_STRING,
  METIS.CHAIN_LINK_CONTRACT_ADDRESS
);
exports.CHAIN_LINK_CONTRACT_ADDRESS.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.CHAIN_LINK_CONTRACT_ADDRESS
);
exports.CHAIN_LINK_CONTRACT_ADDRESS.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.CHAIN_LINK_CONTRACT_ADDRESS
);
exports.CHAIN_LINK_CONTRACT_ADDRESS.set(
  OASIS.NETWORK_STRING,
  OASIS.CHAIN_LINK_CONTRACT_ADDRESS
);
///////////////////////////////////////////////////////////////////////////
///////////////////////////////// HELPERS /////////////////////////////////
///////////////////////////////////////////////////////////////////////////
exports.WHITELIST_TOKENS_MAP = new graph_ts_1.TypedMap();
exports.WHITELIST_TOKENS_MAP.set(
  MAINNET.NETWORK_STRING,
  MAINNET.WHITELIST_TOKENS
);
exports.WHITELIST_TOKENS_MAP.set(
  FANTOM.NETWORK_STRING,
  FANTOM.WHITELIST_TOKENS
);
exports.WHITELIST_TOKENS_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.WHITELIST_TOKENS
);
exports.WHITELIST_TOKENS_MAP.set(MATIC.NETWORK_STRING, MATIC.WHITELIST_TOKENS);
exports.WHITELIST_TOKENS_MAP.set(
  AURORA.NETWORK_STRING,
  AURORA.WHITELIST_TOKENS
);
exports.WHITELIST_TOKENS_MAP.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.WHITELIST_TOKENS
);
exports.WHITELIST_TOKENS_MAP.set(BSC.NETWORK_STRING, BSC.WHITELIST_TOKENS);
exports.WHITELIST_TOKENS_MAP.set(CELO.NETWORK_STRING, CELO.WHITELIST_TOKENS);
exports.WHITELIST_TOKENS_MAP.set(
  CRONOS.NETWORK_STRING,
  CRONOS.WHITELIST_TOKENS
);
exports.WHITELIST_TOKENS_MAP.set(FUSE.NETWORK_STRING, FUSE.WHITELIST_TOKENS);
exports.WHITELIST_TOKENS_MAP.set(
  HARMONY.NETWORK_STRING,
  HARMONY.WHITELIST_TOKENS
);
exports.WHITELIST_TOKENS_MAP.set(HECO.NETWORK_STRING, HECO.WHITELIST_TOKENS);
exports.WHITELIST_TOKENS_MAP.set(METIS.NETWORK_STRING, METIS.WHITELIST_TOKENS);
exports.WHITELIST_TOKENS_MAP.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.WHITELIST_TOKENS
);
exports.WHITELIST_TOKENS_MAP.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.WHITELIST_TOKENS
);
exports.WHITELIST_TOKENS_MAP.set(OASIS.NETWORK_STRING, OASIS.WHITELIST_TOKENS);
exports.NETWORK_SUFFIX_MAP = new Map();
exports.NETWORK_SUFFIX_MAP.set(MAINNET.NETWORK_STRING, MAINNET.NETWORK_SUFFIX);
exports.NETWORK_SUFFIX_MAP.set(FANTOM.NETWORK_STRING, FANTOM.NETWORK_SUFFIX);
exports.NETWORK_SUFFIX_MAP.set(
  ARBITRUM_ONE.NETWORK_STRING,
  ARBITRUM_ONE.NETWORK_SUFFIX
);
exports.NETWORK_SUFFIX_MAP.set(MATIC.NETWORK_STRING, MATIC.NETWORK_SUFFIX);
exports.NETWORK_SUFFIX_MAP.set(AURORA.NETWORK_STRING, AURORA.NETWORK_SUFFIX);
exports.NETWORK_SUFFIX_MAP.set(
  AVALANCHE.NETWORK_STRING,
  AVALANCHE.NETWORK_SUFFIX
);
exports.NETWORK_SUFFIX_MAP.set(BSC.NETWORK_STRING, BSC.NETWORK_SUFFIX);
exports.NETWORK_SUFFIX_MAP.set(CELO.NETWORK_STRING, CELO.NETWORK_SUFFIX);
exports.NETWORK_SUFFIX_MAP.set(CRONOS.NETWORK_STRING, CRONOS.NETWORK_SUFFIX);
exports.NETWORK_SUFFIX_MAP.set(FUSE.NETWORK_STRING, FUSE.NETWORK_SUFFIX);
exports.NETWORK_SUFFIX_MAP.set(HARMONY.NETWORK_STRING, HARMONY.NETWORK_SUFFIX);
exports.NETWORK_SUFFIX_MAP.set(HECO.NETWORK_STRING, HECO.NETWORK_SUFFIX);
exports.NETWORK_SUFFIX_MAP.set(METIS.NETWORK_STRING, METIS.NETWORK_SUFFIX);
exports.NETWORK_SUFFIX_MAP.set(
  MOONBEAM.NETWORK_STRING,
  MOONBEAM.NETWORK_SUFFIX
);
exports.NETWORK_SUFFIX_MAP.set(
  MOONRIVER.NETWORK_STRING,
  MOONRIVER.NETWORK_SUFFIX
);
exports.NETWORK_SUFFIX_MAP.set(OASIS.NETWORK_STRING, OASIS.NETWORK_SUFFIX);
